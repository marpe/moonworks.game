// ReSharper disable CheckNamespace
#pragma warning disable CS8618
#nullable enable
// <auto-generated />
namespace MyGame;

public static class Worlds
{
    public static class World_1
    {
        public static readonly Guid WorldIid = Guid.Parse("45f2e882-fe13-4cff-a7f9-1bd7fba551d8");
        public static readonly Guid Level_1 = Guid.Parse("1fc14b02-53f1-45c4-ad40-be22f198ed46");
        public static readonly Guid Level_2 = Guid.Parse("6d66db8e-2a5a-4d9c-b881-8ca33dea14e1");
        public static readonly Guid Level_3 = Guid.Parse("ea6ff541-e92f-46b4-a98e-43063d9c4a23");
    }

    public static class World_2
    {
        public static readonly Guid WorldIid = Guid.Parse("29d208e4-92d4-4675-83cd-8ca48adb065a");
        public static readonly Guid Level_2_2 = Guid.Parse("51a558ea-ba43-4d17-9d3f-1b3e3fb66aac");
    }
}

public static class LayerDefs
{
    public enum Tiles : long
    {
        Mushroom = 1,
        Flower = 2,
        Grass = 8,
        Fence = 9,
        Tree = 10,
        Ground = 12,
        Left_Ground = 7,
    }

    public static Dictionary<Tiles, Color> TilesColors = new()
    {
        { Tiles.Mushroom, new Color(196f, 6f, 6f, 255f) },
        { Tiles.Flower, new Color(201f, 68f, 68f, 255f) },
        { Tiles.Grass, new Color(55f, 255f, 124f, 255f) },
        { Tiles.Fence, new Color(149f, 106f, 0f, 255f) },
        { Tiles.Tree, new Color(2f, 127f, 66f, 255f) },
        { Tiles.Ground, new Color(57f, 68f, 214f, 255f) },
        { Tiles.Left_Ground, new Color(188f, 38f, 200f, 255f) },
    };

    public enum Background : long
    {
        Background = 1,
    }

    public static Dictionary<Background, Color> BackgroundColors = new()
    {
        { Background.Background, new Color(11f, 117f, 196f, 255f) },
    };

}

public class LevelFields
{
    public string Field;
    public List<Point> FieldArr;
}

public enum EntityType
{
    Player,
    Slug,
    BlueBee,
    Light,
    Bullet,
}

public partial class Entity
{
    public EntityType EntityType;
    public Guid Iid;
    public Point Size;
    public Vector2 Pivot;
    public Color SmartColor;

    [HideInInspector]
    public static Dictionary<EntityType, Type> TypeMap = new()
    {
        { EntityType.Player, typeof(Player) },
        { EntityType.Slug, typeof(Slug) },
        { EntityType.BlueBee, typeof(BlueBee) },
        { EntityType.Light, typeof(Light) },
        { EntityType.Bullet, typeof(Bullet) },
    };

    [HideInInspector]
    public static string[] Identifiers = new[]
    {
        "Player",
        "Slug",
        "BlueBee",
        "Light",
        "Bullet",
    };

}

public partial class Player
{
}

public partial class Slug
{
}

public partial class BlueBee
{
}

public partial class Light
{
    [Range(0, 2)]
    public float Intensity;
    public bool IsEnabled;
    public Color Color;
    [Range(0, 360)]
    public float Angle;
    [Range(0, 360)]
    public float ConeAngle;
    [Range(0, 1)]
    public float RimIntensity;
    [Range(0, 1)]
    public float VolumetricIntensity;
}

public partial class Bullet
{
}

