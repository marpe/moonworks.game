<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

namespace MyGame;

public static class ContentPaths
{
<#
    var sourceFolders = new[] { "Content" };
    HashSet<string> reservedKeywords = new()
    {
        "abstract",
        "as",
        "base",
        "bool",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "checked",
        "class",
        "const",
        "continue",
        "decimal",
        "default",
        "delegate",
        "do",
        "double",
        "else",
        "enum",
        "event",
        "explicit",
        "extern",
        "false",
        "finally",
        "fixed",
        "float",
        "for",
        "foreach",
        "goto",
        "if",
        "implicit",
        "in",
        "int",
        "interface",
        "internal",
        "is",
        "lock",
        "long",
        "namespace",
        "new",
        "null",
        "object",
        "operator",
        "out",
        "override",
        "params",
        "private",
        "protected",
        "public",
        "readonly",
        "ref",
        "return",
        "sbyte",
        "sealed",
        "short",
        "sizeof",
        "stackalloc",
        "static",
        "string",
        "struct",
        "switch",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "uint",
        "ulong",
        "unchecked",
        "unsafe",
        "ushort",
        "using",
        "virtual",
        "void",
        "volatile",
        "while",
    };

    var excludeExtensions = new[]
    {
        ".bat",
        ".fx",
        ".fxh",
        ".gitignore"
    };
    var excludeFolders = new[]
    {
        "Sources"
    };

    foreach (var sourceFolder in sourceFolders)
    {
        var directories = Directory.GetDirectories(Host.ResolvePath(sourceFolder));

        foreach (var dir in directories)
        {
            var folderName = Path.GetFileName(dir);
            if (excludeFolders.Contains(folderName, StringComparer.InvariantCultureIgnoreCase))
            {
                continue;
            }

            PrintDirectoryClass(dir, 2, sourceFolder);
        }

        PrintContentFiles(Host.ResolvePath(sourceFolder), 2, Host.ResolvePath(sourceFolder));
    }

    void PrintDirectoryClass(string dir, int depth, string sourceFolder)
    {
        var dirInfo = new DirectoryInfo(dir);
        var firstIndent = new string('\t', depth);
        var className = GenerateClassName(dirInfo.Name);
        WriteLine("{0}public static class {1}\n{2}{{", firstIndent, className, firstIndent);

        foreach (var subDir in Directory.GetDirectories(dir))
        {
            var folderName = Path.GetFileName(subDir);
            if (excludeFolders.Contains(folderName, StringComparer.InvariantCultureIgnoreCase))
            {
                continue;
            }

            PrintDirectoryClass(subDir, depth + 1, sourceFolder);
        }

        PrintContentFiles(dir, depth + 1, sourceFolder);

        WriteLine("{0}}}\n", firstIndent);
    }

    void PrintContentFiles(string dir, int depth, string sourceFolder)
    {
        var firstIndent = new string('\t', depth);

        foreach (var file in Directory.GetFiles(dir))
        {
            if (excludeExtensions.Contains(Path.GetExtension(file), StringComparer.InvariantCultureIgnoreCase))
            {
                continue;
            }

            // clear out all of the path up to the sourceFolder so we get just the relative path to the Content folder
            var finalPath = file.Substring(file.IndexOf(sourceFolder) + sourceFolder.Length);
            var fileName = Path.GetFileName(finalPath);
            var className = GenerateClassName(fileName);

            if (finalPath[0] == '/' || finalPath[0] == '\\')
            {
                finalPath = finalPath.Substring(1);
            }

            // if file name is reserved insert a leading '@'
            if (reservedKeywords.Contains(className))
            {
                className = className.Insert(0, "@");
            }

            WriteLine("{0}public const string {1} = @\"{2}\";", firstIndent, className, finalPath);
        }
    }

    string StripInvalidPathChars(string input)
    {
        var invalidChars = Path.GetInvalidPathChars();
        return new string(input.Where(m => !invalidChars.Contains(m)).ToArray<char>());
    }

    string StripInvalidFilenameChars(string input)
    {
        var invalidChars = Path.GetInvalidFileNameChars();
        return new string(input.Where(m => !invalidChars.Contains(m)).ToArray<char>());
    }

    string UpperCaseFirst(string str)
    {
        if (char.IsLower(str[0]))
        {
            return char.ToUpper(str[0]) + str.Substring(1);
        }
        return str;
    }

    string GenerateClassName(string input)
    {
        var weirdCharacters = new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]");
        var split = weirdCharacters.Replace(input, " ").Split(' ').Select(UpperCaseFirst);
        var className = string.Join(" ", split);

        // class name doesn't begin with a letter, insert an underscore
        if (!char.IsLetter(className, 0))
        {
            className = className.Insert(0, "_");
        }

        return className.Replace(" ", string.Empty);
    }
#>
}
