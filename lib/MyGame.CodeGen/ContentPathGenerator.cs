using System.Text.RegularExpressions;

namespace MyGame.CodeGen;

public static class ContentPathGenerator
{
    static HashSet<string> _reservedKeywords = new()
    {
        "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const",
        "continue", "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern",
        "false", "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface",
        "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "override",
        "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof",
        "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong",
        "unchecked", "unsafe", "ushort", "using", "virtual", "void", "volatile", "while",
    };

    static string[] _excludeExtensions = new[]
    {
        ".bat",
        ".fx",
        ".fxh",
        ".gitignore",
        ".md",
        ".zip",
        ".frag",
        ".vert"
    };

    static string[] _excludeFolders = new[]
    {
        "Sources"
    };

    private static string RootPath = "";
    private static string RootClassName = "";

    public static string Generate(string rootPath, string rootClassName = "ContentPaths", string rootNamespace = "MyGame")
    {
        RootPath = rootPath;
        RootClassName = rootClassName;

        TextGenerator.Clear();
        TextGenerator.WriteLine("// <auto-generated />");
        TextGenerator.WriteLine($"namespace {rootNamespace};");
        TextGenerator.WriteLine();
        WriteClass(RootPath);

        return TextGenerator.AsString();
    }

    private static void WriteClass(string path)
    {
        string className;
        if (path == RootPath)
        {
            className = RootClassName;
        }
        else
        {
            var dirName = Path.GetFileName(path);
            className = GenerateName(dirName);
        }

        TextGenerator.WriteLine($"public static class {className}");
        TextGenerator.StartBlock();

        var directories = Directory.GetDirectories(path);

        foreach (var dir in directories)
        {
            if (_excludeFolders.Contains(Path.GetFileName(dir)))
                continue;
            WriteClass(dir);
        }

        var files = Directory.GetFiles(path);

        foreach (var file in files)
        {
            if (_excludeExtensions.Contains(Path.GetExtension(file)))
                continue;
            var finalPath = Path.GetRelativePath(Path.Combine(RootPath, ".."), file);
            var fileName = Path.GetFileName(file);
            var strName = GenerateName(fileName);
            TextGenerator.WriteLine($"public const string {strName} = @\"{finalPath}\";");
        }

        TextGenerator.EndBlock();
    }

    private static string GenerateName(string input)
    {
        // see link below for allowed identifier names and explanation for the unicode groups (\p{...})
        // https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#643-identifiers
        var name = new Regex(@"[^A-Za-z0-9_]").Replace(input, "_");

        if (name[0] != '_' && !char.IsLetter(name[0]))
            name = "_" + name;

        if (_reservedKeywords.Contains(name))
            name = "@" + name;

        return name;
    }

    private static string UpperCaseFirst(string str)
    {
        if (char.IsLower(str[0]))
        {
            return char.ToUpper(str[0]) + str.Substring(1);
        }

        return str;
    }
}
