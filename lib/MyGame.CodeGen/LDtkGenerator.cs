using ldtk;

namespace MyGame.CodeGen;

public static class LDtkGenerator
{
    public static string Generate(string filePath, string ldtkNamespace = "MyGame")
    {
        var jsonString = File.ReadAllText(filePath);
        var ldtk = LdtkJson.FromJson(jsonString);

        TextGenerator.Clear();
        TextGenerator.WriteLine("// ReSharper disable CheckNamespace");
        TextGenerator.WriteLine("#pragma warning disable CS8618");
        TextGenerator.WriteLine("#nullable enable");
        TextGenerator.WriteLine("// <auto-generated />");
        TextGenerator.WriteLine($"namespace {ldtkNamespace};");
        TextGenerator.WriteLine();

        WriteWorlds(ldtk);
        WriteLayerDefs(ldtk);
        WriteEnums(ldtk);
        WriteLevelFields(ldtk);
        WriteEntities(ldtk);


        return TextGenerator.AsString();
    }

    private static void WriteLayerDefs(LdtkJson ldtk)
    {
        TextGenerator.WriteLine($"public static class LayerDefs");
        TextGenerator.StartBlock();
        foreach (var layer in ldtk.Defs.Layers)
        {
            if (layer.IntGridValues.Length > 0)
            {
                TextGenerator.WriteLine($"public enum {layer.Identifier} : long");
                TextGenerator.StartBlock();
                for (var i = 0; i < layer.IntGridValues.Length; i++)
                {
                    var intGridValue = layer.IntGridValues[i];
                    TextGenerator.WriteLine($"{intGridValue.Identifier} = {intGridValue.Value},");
                }

                TextGenerator.EndBlock();
                TextGenerator.WriteLine();

                TextGenerator.WriteLine($"public static Dictionary<{layer.Identifier}, Color> {layer.Identifier}Colors = new()");
                TextGenerator.StartBlock();
                for (var i = 0; i < layer.IntGridValues.Length; i++)
                {
                    var intGridValue = layer.IntGridValues[i];
                    var (r, g, b, a) = FromHex(intGridValue.Color.AsSpan().Slice(1));
                    TextGenerator.WriteLine($"{{ {layer.Identifier}.{intGridValue.Identifier}, new Color({r:0.##}f, {g:0.##}f, {b:0.##}f, {a:0.##}f) }},");
                }

                TextGenerator.EndBlock("};");
                TextGenerator.WriteLine();
            }
        }

        TextGenerator.EndBlock();
        TextGenerator.WriteLine();
    }

    private static void WriteEntities(LdtkJson ldtk)
    {
        // entity type enum
        TextGenerator.WriteLine("public enum EntityType");
        TextGenerator.StartBlock();
        for (var i = 0; i < ldtk.Defs.Entities.Length; i++)
        {
            var entity = ldtk.Defs.Entities[i];
            TextGenerator.WriteLine($"{entity.Identifier},");
        }

        TextGenerator.EndBlock();
        TextGenerator.WriteLine();

        // entity base
        TextGenerator.WriteLine($"public partial class Entity");
        TextGenerator.StartBlock();

        TextGenerator.WriteLine($"public EntityType EntityType;");
        TextGenerator.WriteLine($"public Guid Iid;");
        TextGenerator.WriteLine($"public Vector2 Position;");
        TextGenerator.WriteLine($"public Vector2 Size;");
        TextGenerator.WriteLine($"public Vector2 Pivot;");
        TextGenerator.WriteLine($"public Color SmartColor;");

        // type map start
        TextGenerator.WriteLine($"public static Dictionary<EntityType, Type> TypeMap = new()");
        TextGenerator.StartBlock();

        for (var i = 0; i < ldtk.Defs.Entities.Length; i++)
        {
            var entity = ldtk.Defs.Entities[i];
            TextGenerator.WriteLine($"{{ EntityType.{entity.Identifier}, typeof({entity.Identifier}) }},");
        }

        TextGenerator.EndBlock("};");
        TextGenerator.WriteLine();
        // type map end
        TextGenerator.EndBlock();
        TextGenerator.WriteLine();

        // entities
        for (var i = 0; i < ldtk.Defs.Entities.Length; i++)
        {
            var entity = ldtk.Defs.Entities[i];
            TextGenerator.WriteLine($"public partial class {entity.Identifier}");
            TextGenerator.StartBlock();
            foreach (var field in entity.FieldDefs)
            {
                WriteField(field);
            }

            TextGenerator.EndBlock();
            if (i < ldtk.Defs.Entities.Length - 1)
                TextGenerator.WriteLine();
        }

        TextGenerator.WriteLine();
    }

    private static void WriteLevelFields(LdtkJson ldtk)
    {
        TextGenerator.WriteLine("public class LevelFields");
        TextGenerator.StartBlock();
        foreach (var field in ldtk.Defs.LevelFields)
        {
            WriteField(field);
        }

        TextGenerator.EndBlock();
        TextGenerator.WriteLine();
    }

    private static void WriteField(FieldDefinition field)
    {
        var type = field.Type;
        type = type.Replace("LocalEnum.", "");
        type = type.Replace("ExternEnum.", "");
        type = type.Replace("EntityRef", "FieldInstanceEntityReference");
        type = type.Replace("Tile", "TilesetRectangle");

        string ConvertType(string t)
        {
            var typesToLower = new[] { "Float", "String" };
            if (typesToLower.Contains(t))
                return t.ToLower();
            return t;
        }

        var lessThan = type.IndexOf('<');
        var greaterThan = type.IndexOf('>');
        if (lessThan != -1)
        {
            type = ConvertType(type[(lessThan + 1)..greaterThan]) + "[]";
        }
        else
        {
            type = ConvertType(type);
        }

        if (field.CanBeNull)
        {
            type += "?";
        }

        TextGenerator.WriteLine($"public {type} {field.Identifier};");
    }

    private static void WriteEnums(LdtkJson ldtk)
    {
        var allEnums = ldtk.Defs.Enums.Concat(ldtk.Defs.ExternalEnums);
        foreach (var enumDef in allEnums)
        {
            TextGenerator.WriteLine($"public enum {enumDef.Identifier}");
            TextGenerator.StartBlock();
            foreach (var enumValue in enumDef.Values)
            {
                TextGenerator.WriteLine($"{enumValue.Id},");
            }

            TextGenerator.EndBlock();
        }

        TextGenerator.WriteLine();
    }

    private static void WriteWorlds(LdtkJson ldtk)
    {
        TextGenerator.WriteLine($"public static class Worlds");
        TextGenerator.StartBlock();
        for (var i = 0; i < ldtk.Worlds.Length; i++)
        {
            var world = ldtk.Worlds[i];
            TextGenerator.WriteLine($"public static class {world.Identifier}");
            TextGenerator.StartBlock();

            TextGenerator.WriteLine($"public static readonly Guid WorldIid = Guid.Parse(\"{world.Iid}\");");

            foreach (var level in world.Levels)
            {
                TextGenerator.WriteLine($"public static readonly Guid {level.Identifier} = Guid.Parse(\"{level.Iid}\");");
            }

            TextGenerator.EndBlock();
            if (i < ldtk.Worlds.Length - 1)
                TextGenerator.WriteLine();
        }

        TextGenerator.EndBlock();
        TextGenerator.WriteLine();
    }

    private const string HEX = "0123456789ABCDEF";
    private static byte HexToByte(char c) => (byte)HEX.IndexOf(char.ToUpper(c));

    public static (float r, float g, float b, float a) FromHex(ReadOnlySpan<char> hex)
    {
        var r = (HexToByte(hex[0]) * 16 + HexToByte(hex[1])) / 255.0f;
        var g = (HexToByte(hex[2]) * 16 + HexToByte(hex[3])) / 255.0f;
        var b = (HexToByte(hex[4]) * 16 + HexToByte(hex[5])) / 255.0f;

        return (r, g, b, 1.0f);
    }
}
