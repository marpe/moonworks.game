// ReSharper disable CheckNamespace

#pragma warning disable CS8618
#nullable enable
// <auto-generated />
namespace MyGame;

public static class Worlds
{
    public static class World
    {
        public static readonly Guid WorldIid = Guid.Parse("2c81d720-b4d0-11ec-9871-056972512958");
        public static readonly Guid Level_1 = Guid.Parse("2038b2a1-8dc0-11ec-a0e2-e5abc8178676");
        public static readonly Guid Level_0 = Guid.Parse("2039c410-8dc0-11ec-a0e2-db95660971f6");
    }
}

public static class LayerDefs
{
    public enum Tiles : long
    {
        Mushroom = 1,
        Flower = 2,
        Grass = 3,
        Fence = 4,
        Tree = 5,
        Ground = 6,
        Left_Ground = 7,
    }

    public static Dictionary<Tiles, Color> TilesColors = new()
    {
        { Tiles.Mushroom, new Color(1f, 0f, 0f, 1f) },
        { Tiles.Flower, new Color(0.81f, 0.42f, 0.42f, 1f) },
        { Tiles.Grass, new Color(0.27f, 0.79f, 0.34f, 1f) },
        { Tiles.Fence, new Color(0.35f, 0.24f, 0.15f, 1f) },
        { Tiles.Tree, new Color(0.28f, 0.69f, 0.16f, 1f) },
        { Tiles.Ground, new Color(0f, 0.2f, 1f, 1f) },
        { Tiles.Left_Ground, new Color(0.51f, 0f, 1f, 1f) },
    };
}

public enum EnemyType
{
    YellowBee,
    BlueBee,
    Slug,
}

public class LevelFields
{
    public float Float;
    public string? Multilines;
    public TilesetRectangle[] Tile;
}

public enum EntityType
{
    Enemy,
    Gun_Pickup,
    Player,
    RefTest,
}

public partial class Entity
{
    public static Dictionary<EntityType, Type> TypeMap = new()
    {
        { EntityType.Enemy, typeof(Enemy) },
        { EntityType.Gun_Pickup, typeof(Gun_Pickup) },
        { EntityType.Player, typeof(Player) },
        { EntityType.RefTest, typeof(RefTest) },
    };

    public EntityType EntityType;
    public Guid Iid;
    public Vector2 Pivot;
    public Vector2 Position;
    public Vector2 Size;
    public Color SmartColor = Color.Red;
}

public partial class Enemy
{
    public Color Color;
    public EnemyType Type;
    public Point[] Wander;
}

public partial class Gun_Pickup
{
}

public partial class Player
{
}

public partial class RefTest
{
    public FieldInstanceEntityReference? AnotherRef;
    public EnemyType? EnemyType;
    public float? Float;
    public FieldInstanceEntityReference? Test;
    public TilesetRectangle? TileTest;
}
